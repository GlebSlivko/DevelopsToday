{"version":3,"sources":["redux/reducers/postReduser.tsx","redux/reducers/allPostsReducer.tsx","redux/reducers/index.tsx","redux/store/configureStore.jsx","redux/actions/allPostsActions.tsx","components/Home/index.tsx","pages/HomePage/index.tsx","components/Post/index.tsx","pages/PostPage/index.tsx","redux/actions/postActions.tsx","components/CreatePost/index.tsx","pages/CreatePostPage/index.tsx","components/Navbar/index.tsx","routes/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","header","body","allPosts","combineReducers","postReducer","state","action","type","payload","post","allPostsReducer","logger","createLogger","middlewares","thunk","allPostsToStoreSuccess","allPostsToStoreFail","useStyles","makeStyles","theme","navbarRoot","flexGrow","menuButton","marginRight","spacing","title","titleTypography","fontSize","fontWeight","bodyTypography","listRoot","marginTop","width","maxWidth","backgroundColor","palette","background","paper","cardRoot","minWidth","marginBottom","mainContainer","mainButton","number","marginLeft","box","Home","useState","posts","setPosts","postsQuantity","setPostsQuantity","dispatch","useDispatch","useSelector","reverse","getAllPosts","useCallback","axios","get","then","response","result","status","data","filter","useEffect","console","log","loadMoreProducts","setTimeout","totalPostCount","length","addPosts","i","push","history","useHistory","handleClickNewPost","classes","dataLength","next","hasMore","loader","className","src","Container","Button","variant","onClick","map","item","Card","itemId","id","key","CardContent","Typography","Divider","Box","postList","HomePage","createStyles","root","bullet","display","margin","transform","pos","modal","alignItems","justifyContent","border","boxShadow","shadows","padding","button","Post","setPost","React","open","setOpen","postId","useParams","handleClose","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","color","gutterBottom","PostPage","formDataToStoreSuccess","formDataToStoreFail","CreatePost","textValidator","setState","savePost","onSubmit","label","onChange","event","currentTarget","value","handleHeaderChange","name","validators","errorMessages","handleBodyChange","CreatePostPage","NavBar","AppBar","position","Toolbar","IconButton","edge","aria-label","Routes","exact","path","component","to","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bdc212af.chunk.js","sourcesContent":["export const initialState = {\n    header: {},\n    body: {}\n};\n\nexport default function postReducer (state = initialState, action : any) {\n    switch (action.type) {\n        case 'FORM_DATA_TO_STORE_SUCCESS': {\n          return { ...state, header: action.payload.post.header, body: action.payload.post.body };\n        }\n        case 'FETCH_POST_FAIL': {\n          return { ...state };\n        }\n\n        default: {\n          return state\n        }\n  }\n}\n","export const initialState = {\n  allPosts: [],\n};\n\nexport default function allPostReducer(state = initialState, action: any) {\n  switch (action.type) {\n    case \"ALL_POSTS_TO_STORE_SUCCESS\": {\n      return {\n        ...state,\n        allPosts: action.payload,\n      };\n    }\n    case \"ALL_POSTS_TO_STORE_FAIL\": {\n      return { ...state };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReduser\";\nimport allPostsReducer from \"./allPostsReducer\";\n\nexport default combineReducers({\n  postReducer,\n  allPostsReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/index';\nimport { createLogger } from \"redux-logger\";\n\nconst logger = createLogger();\nconst middlewares = [thunk, logger];\n\nexport default function configureStore() {\n    return createStore(\n        rootReducer, composeWithDevTools(applyMiddleware(...middlewares))\n    );\n}\n","import axios from \"axios\";\n\nconst allPostsToStore = () => (dispatch: Function) => {\n  axios\n    .get(\"https://simple-blog-api.crew.red/posts\")\n    .then(response => {\n      return response;\n    })\n    .then(result => {\n      if (result.status === 200) {\n        let post = result.data.filter( (post : any) => (!post.data  || post.data.title !== \"In quibusdam tempore odit est dolorem\"));\n        dispatch(allPostsToStoreSuccess(post));\n      } else {\n        dispatch(allPostsToStoreFail());\n      }\n    });\n};\n\nconst allPostsToStoreSuccess = (post: any) => {\n  return {\n    type: \"ALL_POSTS_TO_STORE_SUCCESS\",\n    payload: post,\n  };\n};\n\nconst allPostsToStoreFail = () => {\n  return {\n    type: \"ALL_POSTS_TO_STORE_FAIL\",\n  };\n};\n\nexport { allPostsToStore, allPostsToStoreSuccess, allPostsToStoreFail };\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { allPostsToStore } from \"../../redux/actions/allPostsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst useStyles = makeStyles(theme => ({\n  navbarRoot: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  titleTypography: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  bodyTypography: {\n    fontSize: 14,\n  },\n  listRoot: {\n    marginTop: 15,\n    width: \"100%\",\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n  },\n  cardRoot: {\n    minWidth: 400,\n    marginBottom: 15,\n  },\n  mainContainer: {\n    marginTop: 15,\n  },\n  mainButton: {\n    marginBottom: 20,\n  },\n  number: {\n    marginLeft: \"100%\",\n  },\n  box: {\n    marginRight: \"5%\",\n  },\n}));\n\nconst Home = () => {\n  const [posts, setPosts] = useState<any[]>([]);\n  const [postsQuantity, setPostsQuantity] = useState<number>(0);\n\n  const dispatch = useDispatch();\n\n  const allPostsfromStore: any = useSelector(\n    (state: any) => state.allPostsReducer.allPosts\n  );\n\n  const allPosts = allPostsfromStore.reverse();\n\n  const getAllPosts = useCallback(() => {\n    dispatch(allPostsToStore());\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log(\"homeUseEffect\");\n    getAllPosts();\n  }, []);\n\n  useEffect(() => {\n    loadMoreProducts();\n  }, [allPosts]);\n\n  const loadMoreProducts = () => {\n    setTimeout(function() {\n      const totalPostCount: number = allPosts.length;\n      if (allPosts.length < 1) return;\n      const step = 12;\n      let addPosts = [];\n      let i = postsQuantity;\n      for (i; i <= postsQuantity + step; i++) {\n        if (i <= totalPostCount) {\n          addPosts.push(allPosts[i]);\n        }\n      }\n      setPosts([...posts, ...addPosts]);\n      setPostsQuantity(i);\n    }, 1500);\n  };\n\n  const history = useHistory();\n\n  const handleClick = (itemId: number) => {\n    history.push(\"/posts/\" + itemId);\n  };\n\n  const handleClickNewPost = () => {\n    history.push(\"/posts/new\");\n  };\n\n  const classes = useStyles();\n  const postList = (allPosts: any[]) => {\n    return (\n      <Container className={classes.mainContainer}>\n        <Button\n          className={classes.mainButton}\n          variant=\"contained\"\n          onClick={handleClickNewPost}\n        >\n          Create New Post\n        </Button>\n\n        {allPosts.map(\n          item =>\n            item && (\n              <Card\n                className={classes.cardRoot}\n                onClick={() => handleClick(item.id)}\n                key={item.id}\n              >\n                <CardContent>\n                  <Typography className={classes.titleTypography}>\n                    {item.data ? item.data.title : item.title}\n                  </Typography>\n                  <Divider />\n                  <Typography className={classes.bodyTypography}>\n                    {item.data ? item.data.body : item.body}\n                    <Box className={classes.box}>\n                      <span className={classes.number}> {item.id}</span>\n                    </Box>\n                  </Typography>\n                </CardContent>\n              </Card>\n            )\n        )}\n      </Container>\n    );\n  };\n  return (\n    <InfiniteScroll\n      dataLength={posts.length}\n      next={loadMoreProducts}\n      hasMore={postsQuantity < allPosts.length}\n      loader={\n        <div className=\"spinner\">\n          <img src=\"spinner.svg\" />\n        </div>\n      }\n    >\n      {postList(posts)}\n    </InfiniteScroll>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport Home from \"../../components/Home\"\n\nconst HomePage = () => {\n    \n    return(\n      <Home />\n    )\n}\n\nexport default HomePage\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: 500,\n    },\n    bullet: {\n      display: \"inline-block\",\n      margin: \"0 2px\",\n      transform: \"scale(0.8)\",\n    },\n    title: {\n      fontSize: 16,\n      fontWeight: \"bold\",\n    },\n    pos: {\n      marginBottom: 12,\n      fontSize: 12,\n    },\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid #000\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n      maxWidth: 400,\n    },\n    button: {\n      marginLeft: \"70%\",\n    },\n  })\n);\n\nconst Post = () => {\n  const [post, setPost] = useState<any[]>([]);\n  const [open, setOpen] = React.useState(true);\n  const classes = useStyles();\n  const { postId } = useParams();\n\n  useEffect(() => {\n    axios\n      .get(`https://simple-blog-api.crew.red/posts/${postId}?_embed=comments`)\n      .then(data => {\n        const inputData = data;\n        setPost([inputData.data]);\n      });\n\n    // eslint-disable-next-line\n  }, []);\n\n  const history = useHistory();\n\n  const handleClose = () => {\n    history.push(\"/\");\n    setOpen(false);\n  };\n\n  return (\n    <Container>\n      {/* <button type=\"button\" onClick={handleOpen}>\n        react-transition-group\n      </button> */}\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <Container className={classes.paper}>\n            {post.map(item => {\n                return (\n                <>\n                  <Typography\n                    className={classes.title}\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                      {item.data ? item.data.title : item.title}\n                  </Typography>\n                  <Divider />\n                  <Typography className={classes.pos} color=\"textSecondary\">\n                      {item.data ? item.data.body : item.body}\n                  </Typography>\n                  <Typography className={classes.button} color=\"textSecondary\">\n                    <Button onClick={handleClose} color=\"primary\">\n                      ok\n                    </Button>\n                  </Typography>\n                </>\n              );\n            })}\n          </Container>\n        </Fade>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default Post;\n","import React from \"react\"\nimport Post from \"../../components/Post\"\n\nconst PostPage = () => {\n    \n    return(\n      <Post />\n    )\n}\n\nexport default PostPage","import axios from \"axios\";\n\nconst formDataToStore = (data: any) => (dispatch: any) => {\n  dispatch(formDataToStoreSuccess(data));\n  axios\n    .post(\"https://simple-blog-api.crew.red/posts\", {\n      data: {\n        title: data.header,\n        body: data.body,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .then(result => {\n      if (result.status === 200) {\n        let post = result.data;\n        dispatch(formDataToStoreSuccess(post));\n      } else {\n        dispatch(formDataToStoreFail());\n      }\n    });\n};\n\nconst formDataToStoreSuccess = (post: any) => {\n  return {\n    type: \"FORM_DATA_TO_STORE_SUCCESS\",\n    payload: {\n      post,\n    },\n  };\n};\nconst formDataToStoreFail = () => {\n  return {\n    type: \"FORM_DATA_TO_STORE_FAIL\",\n  };\n};\n\nexport {\n  formDataToStore,\n  formDataToStoreSuccess,\n  formDataToStoreFail\n};\n","import React, { useState, useCallback, FormEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { formDataToStore } from \"../../redux/actions/postActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nimport { Theme, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { useHistory } from \"react-router-dom\";\n\nconst CreatePost = () => {\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      cardRoot: {\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n      },\n      root: {\n        maxWidth: 500,\n      },\n      bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\",\n      },\n      title: {\n        fontSize: 16,\n        fontWeight: \"bold\",\n        minWidth: 400,\n      },\n      textValidator: {\n        fontSize: 16,\n        fontWeight: \"bold\",\n        minWidth: 500,\n      },\n      pos: {\n        marginBottom: 12,\n        fontSize: 12,\n      },\n      modal: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      },\n      paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: \"2px solid #000\",\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        maxWidth: 600,\n      },\n      button: {\n        marginTop: 35,\n        marginLeft: \"70%\",\n      },\n    })\n  );\n  const [open, setOpen] = React.useState(true);\n  const [state, setState] = useState({\n    header: \"\",\n    body: \"\",\n  });\n\n  const dispatch = useDispatch();\n\n  const savePost = useCallback(() => {\n    dispatch(formDataToStore(state));\n  }, [dispatch, state]);\n\n  const handleHeaderChange = (event: FormEvent<{}>) => {\n    const element = event.currentTarget as HTMLInputElement;\n    const header = element.value;\n    setState({ header, body });\n  };\n\n  const handleBodyChange = (event: FormEvent<{}>) => {\n    const element = event.currentTarget as HTMLInputElement;\n    const body = element.value;\n    setState({ header, body });\n  };\n\n  const handleSubmit = () => {\n    savePost();\n    setTimeout(() => {\n      history.push(\"/\");\n    }, 100);\n  };\n\n  const { header, body } = state;\n\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const handleClose = () => {\n    history.push(\"/\");\n    setOpen(false);\n  };\n\n  return (\n    <Container>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <Container className={classes.paper}>\n            <ValidatorForm\n              // ref=\"form\"\n              onSubmit={handleSubmit}\n            >\n              <Typography\n                className={classes.title}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                <TextValidator\n                  className={classes.textValidator}\n                  label=\"Header\"\n                  onChange={event => handleHeaderChange(event)}\n                  name=\"header\"\n                  value={header}\n                  validators={[\"required\"]}\n                  errorMessages={[\"this field is required\"]}\n                />\n              </Typography>\n              <TextValidator\n                className={classes.textValidator}\n                label=\"Body\"\n                onChange={event => handleBodyChange(event)}\n                name=\"body\"\n                value={body}\n                validators={[\"required\"]}\n                errorMessages={[\"this field is required\"]}\n              />\n              <Typography\n                className={classes.button}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                <Button type=\"submit\">Submit</Button>\n              </Typography>\n            </ValidatorForm>\n          </Container>\n        </Fade>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default CreatePost;\n","import React from \"react\"\nimport CreatePost from \"../../components/CreatePost\"\n\nconst CreatePostPage = () => {\n    \n    return(\n      <CreatePost />\n    )\n}\n\nexport default CreatePostPage","import React from \"react\"\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n\n   navbarRoot: {\n      flexGrow: 1,\n    },\n        menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    listRoot: {\n    marginTop:15,  \n    width: '100%',\n    maxWidth: 800,\n    backgroundColor: theme.palette.background.paper,\n     },\n     cardRoot: {\n    minWidth: 400,\n  \n  },\n    }));\n\nconst NavBar = () => {\n  const classes = useStyles();\n\n    return(\n      <div className={classes.navbarRoot}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Front-End (React) test assessment by DevelopsToday\n          </Typography>\n        </Toolbar>\n      </AppBar>\n     </div>\n    )\n}\n\nexport default NavBar\n    \n ","import React, {useEffect} from \"react\";\nimport {Switch, Route, Redirect} from \"react-router-dom\";\n\nimport HomePage from \"../pages/HomePage\";\nimport PostPage from \"../pages/PostPage\";\nimport CreatePostPage from \"../pages/CreatePostPage\";\nimport NavBar from \"../components/Navbar\"\n\n\nconst Routes = () => {\n  useEffect(() => { \n  }, []);\n\n  return  (  \n    <>\n    <NavBar />\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/posts/new\" component={CreatePostPage} />\n      <Route path=\"/posts/:postId\" component={PostPage} />\n      <Redirect to=\"/\" />\n    </Switch>\n    </>\n  )\n};\n\n\nexport default Routes\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/store/configureStore';\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes/Routes\";\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>       \n          <Routes />       \n      </BrowserRouter>\n     </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport {}\n"],"sourceRoot":""}